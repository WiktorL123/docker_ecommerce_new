version: '3.9'

services:
  database:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - database
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5


  redis-cache:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - cache
    volumes:
      - redisdata:/data

  product-service:
    build: ./product-service
#    ports:
#      - "${PRODUCT_SERVICE_PORT}:3001"
    volumes:
      - productstatus:/status
    depends_on:
      - database
    env_file:
      - .env
    networks:
      - backend
      - database


  order-service:
    build: ./order-service
#    ports:
#      - "${ORDER_SERVICE_PORT}:3002"
    env_file:
      - .env
    depends_on:
      - redis-cache
    networks:
      - backend
      - cache


  api-gateway:
    build: ./api-gateway
    ports:
      - "${API_GATEWAY_PORT}:3000"
    env_file:
      - .env
    depends_on:
      - product-service
      - order-service
    networks:
      - frontend
      - backend

  frontend:
    build: ./frontend
    ports:
      - "${FRONTEND_PORT}:80"
    networks:
      - frontend
    depends_on:
      - api-gateway


  dev-monitor:
    build:
      context: ./dev-monitor
      dockerfile: Dockerfile
    depends_on:
      - product-service
      - order-service
      - api-gateway
      - redis-cache
      - database
    networks:
      - backend
      - cache
      - database
    profiles:
      - dev
    environment:
      - POSTGRES_USER=${POSTGRES_USER}

volumes:
  pgdata:
  redisdata:
  productstatus:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
  database:
    driver: bridge
  cache:
    driver: bridge